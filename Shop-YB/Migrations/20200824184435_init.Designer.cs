// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ShopYB.Models;

namespace ShopYB.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20200824184435_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ShopYB.Models.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<string>("FullName")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<string>("Password")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<string>("Phone");

                    b.Property<bool>("Status");

                    b.Property<string>("Username")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("Account");
                });

            modelBuilder.Entity("ShopYB.Models.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountId");

                    b.Property<string>("Address1")
                        .IsRequired();

                    b.Property<string>("City")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("Phone")
                        .IsRequired();

                    b.Property<string>("State")
                        .IsRequired();

                    b.Property<string>("Zipcode")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("ShopYB.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasMaxLength(250);

                    b.Property<int?>("ParentId");

                    b.Property<bool>("Status");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("ShopYB.Models.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content");

                    b.Property<DateTime>("Date_Time");

                    b.Property<string>("Email");

                    b.Property<string>("FullName");

                    b.Property<bool>("IsRead");

                    b.Property<int>("ProductId");

                    b.Property<bool>("Status");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("Comment");
                });

            modelBuilder.Entity("ShopYB.Models.Config", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address");

                    b.Property<string>("Describe");

                    b.Property<string>("Email");

                    b.Property<string>("Logo");

                    b.Property<string>("Mobile");

                    b.Property<string>("Name");

                    b.Property<string>("Phone");

                    b.Property<string>("RecordNumber");

                    b.Property<string>("TermPolicy");

                    b.HasKey("Id");

                    b.ToTable("Config");
                });

            modelBuilder.Entity("ShopYB.Models.ContactUs", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date");

                    b.Property<string>("Description");

                    b.Property<string>("Email");

                    b.Property<string>("FullName");

                    b.Property<bool>("IsRead");

                    b.Property<string>("Subject");

                    b.HasKey("Id");

                    b.ToTable("Contactus");
                });

            modelBuilder.Entity("ShopYB.Models.Invoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountId");

                    b.Property<DateTime>("Created");

                    b.Property<string>("Name");

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("Invoice");
                });

            modelBuilder.Entity("ShopYB.Models.InvoiceDetails", b =>
                {
                    b.Property<int>("InvoiceId");

                    b.Property<int>("ProductId");

                    b.Property<int>("Price");

                    b.Property<int>("Quantity");

                    b.HasKey("InvoiceId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("InvoiceDetails");
                });

            modelBuilder.Entity("ShopYB.Models.LikeDislike", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CommentId");

                    b.Property<bool>("Status");

                    b.Property<string>("UserIp");

                    b.HasKey("Id");

                    b.HasIndex("CommentId");

                    b.ToTable("LikeDislike");
                });

            modelBuilder.Entity("ShopYB.Models.PDiscount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<double>("DiscountValue");

                    b.Property<DateTime>("ExpirayDate");

                    b.Property<bool>("IsActive");

                    b.Property<int>("ProductId");

                    b.Property<DateTime>("ValidFrom");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("PDiscount");
                });

            modelBuilder.Entity("ShopYB.Models.PayMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<string>("Method");

                    b.HasKey("Id");

                    b.ToTable("PayMethod");
                });

            modelBuilder.Entity("ShopYB.Models.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountId");

                    b.Property<int>("Amount");

                    b.Property<DateTime>("Date");

                    b.Property<int>("InvoiceId");

                    b.Property<int>("PayMethodId");

                    b.Property<bool>("Status");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("InvoiceId")
                        .IsUnique();

                    b.HasIndex("PayMethodId");

                    b.ToTable("Payment");
                });

            modelBuilder.Entity("ShopYB.Models.Photo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Featured");

                    b.Property<string>("Name");

                    b.Property<int>("ProductId");

                    b.Property<bool>("Status");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("Photo");
                });

            modelBuilder.Entity("ShopYB.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryId");

                    b.Property<string>("Description");

                    b.Property<string>("Details");

                    b.Property<bool>("Featured");

                    b.Property<string>("Name");

                    b.Property<int>("Price");

                    b.Property<int>("Quantity");

                    b.Property<bool>("Status");

                    b.Property<int>("View");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("ShopYB.Models.ProductCategoryDiscount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CategoryId");

                    b.Property<string>("Coupon_Code");

                    b.Property<DateTime>("Create_Date");

                    b.Property<string>("Discount_Unit");

                    b.Property<int>("Discount_Value");

                    b.Property<bool>("Is_Redeem_Allowed");

                    b.Property<int>("Max_Discount_Amount");

                    b.Property<int>("Min_Order_Value");

                    b.Property<int>("Product_Category_Id");

                    b.Property<DateTime>("Valid_From");

                    b.Property<DateTime>("Valid_Until");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Product_Category_Discount");
                });

            modelBuilder.Entity("ShopYB.Models.ProductDiscount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Coupon_Code");

                    b.Property<DateTime>("Create_Date");

                    b.Property<string>("Discount_Unit");

                    b.Property<int>("Discount_Value");

                    b.Property<bool>("Is_Redeem_Allowed");

                    b.Property<int>("Max_Discount_Amount");

                    b.Property<int>("Min_Order_Value");

                    b.Property<int?>("ProductId");

                    b.Property<int>("Product_Id");

                    b.Property<DateTime>("Valid_From");

                    b.Property<DateTime>("Valid_Until");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("Product_Discount");
                });

            modelBuilder.Entity("ShopYB.Models.ProductPrice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BasePrice");

                    b.Property<DateTime>("CreateDate");

                    b.Property<DateTime>("ExpirayDate");

                    b.Property<bool>("IsActive");

                    b.Property<int>("ProductId");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("Product_Price");
                });

            modelBuilder.Entity("ShopYB.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<bool?>("Status");

                    b.HasKey("Id");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("ShopYB.Models.RoleAccount", b =>
                {
                    b.Property<int>("RoleId");

                    b.Property<int>("AccountId");

                    b.Property<bool?>("Status");

                    b.HasKey("RoleId", "AccountId")
                        .HasName("PK_RoleAccount_Tbl");

                    b.HasIndex("AccountId");

                    b.ToTable("RoleAccount");
                });

            modelBuilder.Entity("ShopYB.Models.Ship", b =>
                {
                    b.Property<int>("InvoiceId");

                    b.Property<int>("AddressId");

                    b.Property<int>("Price");

                    b.Property<int>("ShipMethod");

                    b.HasKey("InvoiceId", "AddressId");

                    b.HasAlternateKey("AddressId", "InvoiceId");

                    b.HasIndex("InvoiceId")
                        .IsUnique();

                    b.ToTable("Ship");
                });

            modelBuilder.Entity("ShopYB.Models.SlideShow", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.Property<bool>("Status");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.ToTable("SlideShow");
                });

            modelBuilder.Entity("ShopYB.Models.UserRewardPoint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Create_Date");

                    b.Property<DateTime>("Expairy_Date");

                    b.Property<string>("OPeration_Type");

                    b.Property<int>("Reward_Points");

                    b.Property<string>("Reward_Type");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.ToTable("UserRewardPoints");
                });

            modelBuilder.Entity("ShopYB.Models.Address", b =>
                {
                    b.HasOne("ShopYB.Models.Account", "Account")
                        .WithMany("Addresses")
                        .HasForeignKey("AccountId")
                        .HasConstraintName("FK_AddressTable_Account");
                });

            modelBuilder.Entity("ShopYB.Models.Category", b =>
                {
                    b.HasOne("ShopYB.Models.Category", "Parent")
                        .WithMany("InverseParents")
                        .HasForeignKey("ParentId")
                        .HasConstraintName("FK_Category_Category");
                });

            modelBuilder.Entity("ShopYB.Models.Comment", b =>
                {
                    b.HasOne("ShopYB.Models.Product", "Product")
                        .WithMany("Comments")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_Comment_Product");
                });

            modelBuilder.Entity("ShopYB.Models.Invoice", b =>
                {
                    b.HasOne("ShopYB.Models.Account", "Account")
                        .WithMany("Invoices")
                        .HasForeignKey("AccountId")
                        .HasConstraintName("FK_Invoice_Account");
                });

            modelBuilder.Entity("ShopYB.Models.InvoiceDetails", b =>
                {
                    b.HasOne("ShopYB.Models.Invoice", "Invoice")
                        .WithMany("InvoiceDetails")
                        .HasForeignKey("InvoiceId")
                        .HasConstraintName("FK_InvoiceDetails_Invoice");

                    b.HasOne("ShopYB.Models.Product", "Product")
                        .WithMany("InvoiceDetails")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_InvoiceDetails_Product");
                });

            modelBuilder.Entity("ShopYB.Models.LikeDislike", b =>
                {
                    b.HasOne("ShopYB.Models.Comment", "Comment")
                        .WithMany("LikeDislikes")
                        .HasForeignKey("CommentId")
                        .HasConstraintName("FK_LikeDislike_Comment");
                });

            modelBuilder.Entity("ShopYB.Models.PDiscount", b =>
                {
                    b.HasOne("ShopYB.Models.Product", "Product")
                        .WithMany("PDiscounts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ShopYB.Models.Payment", b =>
                {
                    b.HasOne("ShopYB.Models.Account", "Account")
                        .WithMany("Payments")
                        .HasForeignKey("AccountId")
                        .HasConstraintName("FK_Payment_Product");

                    b.HasOne("ShopYB.Models.Invoice", "Invoice")
                        .WithOne("Payments")
                        .HasForeignKey("ShopYB.Models.Payment", "InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ShopYB.Models.PayMethod", "PayMethods")
                        .WithMany("Payments")
                        .HasForeignKey("PayMethodId")
                        .HasConstraintName("FK_Payment_PayMethod");
                });

            modelBuilder.Entity("ShopYB.Models.Photo", b =>
                {
                    b.HasOne("ShopYB.Models.Product", "Product")
                        .WithMany("Photos")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_Product_Photo");
                });

            modelBuilder.Entity("ShopYB.Models.Product", b =>
                {
                    b.HasOne("ShopYB.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("FK_Category_Product");
                });

            modelBuilder.Entity("ShopYB.Models.ProductCategoryDiscount", b =>
                {
                    b.HasOne("ShopYB.Models.Category", "Category")
                        .WithMany("ProductCategoryDiscounts")
                        .HasForeignKey("CategoryId");
                });

            modelBuilder.Entity("ShopYB.Models.ProductDiscount", b =>
                {
                    b.HasOne("ShopYB.Models.Product", "Product")
                        .WithMany("ProductDiscounts")
                        .HasForeignKey("ProductId");
                });

            modelBuilder.Entity("ShopYB.Models.ProductPrice", b =>
                {
                    b.HasOne("ShopYB.Models.Product", "Product")
                        .WithMany("ProductPrices")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ShopYB.Models.RoleAccount", b =>
                {
                    b.HasOne("ShopYB.Models.Account", "Account")
                        .WithMany("RoleAccounts")
                        .HasForeignKey("AccountId")
                        .HasConstraintName("FK_RoleAccount_Tbl_Account_Tbl");

                    b.HasOne("ShopYB.Models.Role", "Role")
                        .WithMany("RoleAccounts")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK_RoleAccount_Tbl_Role_Tbl");
                });

            modelBuilder.Entity("ShopYB.Models.Ship", b =>
                {
                    b.HasOne("ShopYB.Models.Address", "Address")
                        .WithMany("Ships")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ShopYB.Models.Invoice", "Invoice")
                        .WithOne("Ships")
                        .HasForeignKey("ShopYB.Models.Ship", "InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
